# Caddy web server config for Sensorgnome
#

{
        # admin off
        ocsp_stapling off
        auto_https off
        # on_demand_tls {
        #         ask http://localhost:8081/ip-ok
        # }
        log default {
                format filter {
                        wrap console
                        fields {
                                request>headers delete
                                request>tls delete
                                request>remote_port delete
                                resp_headers delete
                        }
                }
        }
}

# main site access, sends to the config service if not yet configured, else sg-control service
(main) {
        # where to look for files
        root * /opt/sensorgnome/web-portal/public
        # if path is / and file need_init exists then rewrite to config.html
        # so the user gets the initial configuration stuff
        @start_init {
                path /
                file need_init
        }
        rewrite @start_init /init/config
        # handle initial configuration paths
        handle_path /init/* {
                # if the request doesn't match a file, try an action
                @init_action not file {path}
                reverse_proxy @init_action localhost:8081
                # else serve file
                file_server
        }
        # handle captive portal magic
        redir /generate_204 /
        redir /gen_204 /
        redir /blank.html /
        redir /mobile/status.php /
        redir /hotspot-detect.html /
        @captive_ua header User-Agent *CaptiveNetworkSupport*
        redir @captive_ua /init/apple-hotspot.html
        # error if we need init and nothing above handles the request
        @need_init file need_init
        respond @need_init 404
        # normal sg-control app only if init is done
        reverse_proxy localhost:8080
        log {
                format filter {
                        wrap console
                        fields {
                                request>headers delete
                                request>tls delete
                                request>remote_port delete
                                resp_headers delete
                                user_id replace "HTTPS-443"
                        }
                }
        }
}

# Site on HTTPS with any IP address using a wild-card cert for my.local-ip.co
:443 {
        # log {
        #         format filter {
        #                 wrap console
        #                 fields {
        #                         request>headers delete
        #                         resp_headers delete
        #                         user_id replace "HTTPS-443"
        #                 }
        #         }
        # }
        import main
        # ensure we get automatic certs and redirect from HTTP
        tls /etc/sensorgnome/local-ip.pem /etc/sensorgnome/local-ip.key
}

# Site on HTTP for hotspot interface only
:88 {
        # log {
        #         format filter {
        #                 wrap console
        #                 fields {
        #                         request>headers delete
        #                         resp_headers delete
        #                         user_id replace "HTTP-88"
        #                 }
        #         }
        # }
        #bind 192.168.7.2 ,_ doesn't work 'cause ap0 may not have an IP address'
        @denied not remote_ip 192.168.7.0/24
        respond @denied 403 {
                close
        }
        import main
}

# Redirect used by ethernet and wifi client interfaces
:80 {
        log {
                format filter {
                        wrap console
                        fields {
                                request>headers delete
                                resp_headers delete
                                common_log delete
                                user_id replace "HTTP-eth"
                        }
                }
        }
        rewrite * /redirect
        reverse_proxy localhost:8081
}

# Hotspot interface, requests to 192.168.7.2:80 rewritten using iptables
http://:81 {
        log {
                format filter {
                        wrap console
                        fields {
                                request>headers delete
                                resp_headers delete
                                common_log delete
                                user_id replace "HTTP-hotspot"
                        }
                }
        }
        @capture not path /captive /set-time
        rewrite @capture /redirect-hs
        reverse_proxy localhost:8081
}

# Arbitrary hostnames captured by portal, rewritten to port 82 by iptables
http://:82 {
        log {
                format filter {
                        wrap console
                        fields {
                                request>headers delete
                                resp_headers delete
                                common_log delete
                                user_id replace "HTTP-captive"
                        }
                }
        }
        redir http://192.168.7.2/
}

# Refer to the Caddy docs for more information:
# https://caddyserver.com/docs/caddyfile
